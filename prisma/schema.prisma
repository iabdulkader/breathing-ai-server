// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
  creator
  agent
  feed
}

model User {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String?
  email             String    @unique
  customerId        String?
  roles             Role[]
  username          String?
  jobTitle          String?
  info              Json?
  createdOn         DateTime? @default(now())
  modifiedOn        DateTime? @updatedAt
  emailVerified     Boolean?  @default(false)
  verificationToken String?
  deviceIds         String[]
}

model UserCredentials {
  email    String @unique
  password String
  userId   String @unique
}

model Customer {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String?
  email       String   @unique
  phoneNumber String?
  b2b         Boolean? @default(false)
  info        Json?

  createdOn  DateTime? @default(now())
  modifiedOn DateTime? @updatedAt

  companyName String?
  language    String?

  stripeCustomer String?
  subscriptionId String?
  quantity       Int?
  billingAddress Json?
}

model Subscription {
  id               String @id @default(uuid())
  customerId       String
  stripeCustomerId String
  subscriptionId   String
  quantity         Int
}

model Bookmarks {
  id         String   @id @default(uuid())
  userId     String   @unique
  contentIds String[]
  createdOn  DateTime @default(now())
  modifiedOn DateTime @updatedAt
}

// Extension
model ExtensionSettings {
  id     String         @id @default(uuid())
  userId String         @unique
  app    AppSettings?
  breaks BreakSettings?
  colors ColorsSetting?
  sounds soundSettings?
}

model AppSettings {
  id         Int     @id @default(autoincrement())
  paused     Boolean
  language   String
  activeTime Json?
  theme      String?

  user   ExtensionSettings @relation(fields: [userId], references: [id])
  userId String            @unique
}

model BreakSettings {
  id        Int     @id @default(autoincrement())
  enabled   Boolean
  alert     Boolean
  frequency Int

  user   ExtensionSettings @relation(fields: [userId], references: [id])
  userId String            @unique
}

model ColorsSetting {
  id            Int     @id @default(autoincrement())
  enabled       Boolean
  opacity       String
  selectedColor String

  user   ExtensionSettings @relation(fields: [userId], references: [id])
  userId String            @unique
}

model soundSettings {
  id      Int     @id @default(autoincrement())
  enabled Boolean

  user   ExtensionSettings @relation(fields: [userId], references: [id])
  userId String            @unique
}

// Screentime

model UserScreenTime {
  id         String @id @default(uuid())
  date       String
  userId     String @unique
  screenTime Json?

  @@unique([date, userId])
}

model UserImprovement {
  id          String        @id @default(uuid())
  userId      String        @unique
  improvement Improvement[]
}

model Improvement {
  id         String   @id @default(uuid())
  contentIds String[]
  device     String
  completed  Boolean
  rating     Int?

  userImprovement   UserImprovement @relation(fields: [userImprovementId], references: [id])
  userImprovementId String
}

model UserColors {
  id     String   @id @default(uuid())
  userId String   @unique
  colors String[]
}
